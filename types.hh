#ifndef __BASE_TYPES_HH__
#define __BASE_TYPES_HH__

#include <inttypes.h>

#include <cassert>
#include <memory>
#include <ostream>
#include <stdexcept>

// #include "base/refcnt.hh"
/* Hide the fact that this enum is generated by Python */
// #include "enums/ByteOrder.hh"

/** uint64_t constant */
#define ULL(N)          ((uint64_t)N##ULL)
/** int64_t constant */
#define LL(N)           ((int64_t)N##LL)

/**
 * Address type
 * This will probably be moved somewhere else in the near future.
 * This should be at least as big as the biggest address width in use
 * in the system, which will probably be 64 bits.
 */
typedef uint64_t Addr;

const Addr MaxAddr = (Addr)-1;

static inline uint32_t
floatToBits32(float val)
{
    union
    {
        float f;
        uint32_t i;
    } u;
    u.f = val;
    return u.i;
}

static inline uint64_t
floatToBits64(double val)
{
    union
    {
        double f;
        uint64_t i;
    } u;
    u.f = val;
    return u.i;
}

static inline uint64_t floatToBits(double val) { return floatToBits64(val); }
static inline uint32_t floatToBits(float val) { return floatToBits32(val); }

static inline float
bitsToFloat32(uint32_t val)
{
    union
    {
        float f;
        uint32_t i;
    } u;
    u.i = val;
    return u.f;
}

static inline double
bitsToFloat64(uint64_t val)
{
    union
    {
        double f;
        uint64_t i;
    } u;
    u.i = val;
    return u.f;
}

static inline double bitsToFloat(uint64_t val) { return bitsToFloat64(val); }
static inline float bitsToFloat(uint32_t val) { return bitsToFloat32(val); }

// Rather than creating a shared_ptr instance and assigning it nullptr,
// we just create an alias.
constexpr decltype(nullptr) NoFault = nullptr;

#endif // __BASE_TYPES_HH__
